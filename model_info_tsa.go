/*
TTE Service

This API is used for sending whatsapp via API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk-esign-service

import (
	"encoding/json"
)

// checks if the InfoTSA type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InfoTSA{}

// InfoTSA struct for InfoTSA
type InfoTSA struct {
	Name *string `json:"name,omitempty"`
	TsaCertValidity NullableString `json:"tsa_cert_validity,omitempty"`
}

// NewInfoTSA instantiates a new InfoTSA object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInfoTSA() *InfoTSA {
	this := InfoTSA{}
	return &this
}

// NewInfoTSAWithDefaults instantiates a new InfoTSA object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInfoTSAWithDefaults() *InfoTSA {
	this := InfoTSA{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *InfoTSA) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InfoTSA) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *InfoTSA) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *InfoTSA) SetName(v string) {
	o.Name = &v
}

// GetTsaCertValidity returns the TsaCertValidity field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InfoTSA) GetTsaCertValidity() string {
	if o == nil || IsNil(o.TsaCertValidity.Get()) {
		var ret string
		return ret
	}
	return *o.TsaCertValidity.Get()
}

// GetTsaCertValidityOk returns a tuple with the TsaCertValidity field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InfoTSA) GetTsaCertValidityOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TsaCertValidity.Get(), o.TsaCertValidity.IsSet()
}

// HasTsaCertValidity returns a boolean if a field has been set.
func (o *InfoTSA) HasTsaCertValidity() bool {
	if o != nil && o.TsaCertValidity.IsSet() {
		return true
	}

	return false
}

// SetTsaCertValidity gets a reference to the given NullableString and assigns it to the TsaCertValidity field.
func (o *InfoTSA) SetTsaCertValidity(v string) {
	o.TsaCertValidity.Set(&v)
}
// SetTsaCertValidityNil sets the value for TsaCertValidity to be an explicit nil
func (o *InfoTSA) SetTsaCertValidityNil() {
	o.TsaCertValidity.Set(nil)
}

// UnsetTsaCertValidity ensures that no value is present for TsaCertValidity, not even an explicit nil
func (o *InfoTSA) UnsetTsaCertValidity() {
	o.TsaCertValidity.Unset()
}

func (o InfoTSA) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InfoTSA) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if o.TsaCertValidity.IsSet() {
		toSerialize["tsa_cert_validity"] = o.TsaCertValidity.Get()
	}
	return toSerialize, nil
}

type NullableInfoTSA struct {
	value *InfoTSA
	isSet bool
}

func (v NullableInfoTSA) Get() *InfoTSA {
	return v.value
}

func (v *NullableInfoTSA) Set(val *InfoTSA) {
	v.value = val
	v.isSet = true
}

func (v NullableInfoTSA) IsSet() bool {
	return v.isSet
}

func (v *NullableInfoTSA) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInfoTSA(val *InfoTSA) *NullableInfoTSA {
	return &NullableInfoTSA{value: val, isSet: true}
}

func (v NullableInfoTSA) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInfoTSA) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


