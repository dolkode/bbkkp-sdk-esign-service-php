/*
TTE Service

This API is used for sending whatsapp via API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk-esign-service

import (
	"encoding/json"
)

// checks if the SignatureDocument type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SignatureDocument{}

// SignatureDocument struct for SignatureDocument
type SignatureDocument struct {
	SignedUsingTsa *bool `json:"signed_using_tsa,omitempty"`
	Reason NullableString `json:"reason,omitempty"`
	DocumentIntegrity *bool `json:"document_integrity,omitempty"`
	SignatureValue NullableString `json:"signature_value,omitempty"`
	SignedIn *string `json:"signed_in,omitempty"`
	Location NullableString `json:"location,omitempty"`
	HashValue NullableString `json:"hash_value,omitempty"`
}

// NewSignatureDocument instantiates a new SignatureDocument object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSignatureDocument() *SignatureDocument {
	this := SignatureDocument{}
	return &this
}

// NewSignatureDocumentWithDefaults instantiates a new SignatureDocument object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSignatureDocumentWithDefaults() *SignatureDocument {
	this := SignatureDocument{}
	return &this
}

// GetSignedUsingTsa returns the SignedUsingTsa field value if set, zero value otherwise.
func (o *SignatureDocument) GetSignedUsingTsa() bool {
	if o == nil || IsNil(o.SignedUsingTsa) {
		var ret bool
		return ret
	}
	return *o.SignedUsingTsa
}

// GetSignedUsingTsaOk returns a tuple with the SignedUsingTsa field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SignatureDocument) GetSignedUsingTsaOk() (*bool, bool) {
	if o == nil || IsNil(o.SignedUsingTsa) {
		return nil, false
	}
	return o.SignedUsingTsa, true
}

// HasSignedUsingTsa returns a boolean if a field has been set.
func (o *SignatureDocument) HasSignedUsingTsa() bool {
	if o != nil && !IsNil(o.SignedUsingTsa) {
		return true
	}

	return false
}

// SetSignedUsingTsa gets a reference to the given bool and assigns it to the SignedUsingTsa field.
func (o *SignatureDocument) SetSignedUsingTsa(v bool) {
	o.SignedUsingTsa = &v
}

// GetReason returns the Reason field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SignatureDocument) GetReason() string {
	if o == nil || IsNil(o.Reason.Get()) {
		var ret string
		return ret
	}
	return *o.Reason.Get()
}

// GetReasonOk returns a tuple with the Reason field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SignatureDocument) GetReasonOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Reason.Get(), o.Reason.IsSet()
}

// HasReason returns a boolean if a field has been set.
func (o *SignatureDocument) HasReason() bool {
	if o != nil && o.Reason.IsSet() {
		return true
	}

	return false
}

// SetReason gets a reference to the given NullableString and assigns it to the Reason field.
func (o *SignatureDocument) SetReason(v string) {
	o.Reason.Set(&v)
}
// SetReasonNil sets the value for Reason to be an explicit nil
func (o *SignatureDocument) SetReasonNil() {
	o.Reason.Set(nil)
}

// UnsetReason ensures that no value is present for Reason, not even an explicit nil
func (o *SignatureDocument) UnsetReason() {
	o.Reason.Unset()
}

// GetDocumentIntegrity returns the DocumentIntegrity field value if set, zero value otherwise.
func (o *SignatureDocument) GetDocumentIntegrity() bool {
	if o == nil || IsNil(o.DocumentIntegrity) {
		var ret bool
		return ret
	}
	return *o.DocumentIntegrity
}

// GetDocumentIntegrityOk returns a tuple with the DocumentIntegrity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SignatureDocument) GetDocumentIntegrityOk() (*bool, bool) {
	if o == nil || IsNil(o.DocumentIntegrity) {
		return nil, false
	}
	return o.DocumentIntegrity, true
}

// HasDocumentIntegrity returns a boolean if a field has been set.
func (o *SignatureDocument) HasDocumentIntegrity() bool {
	if o != nil && !IsNil(o.DocumentIntegrity) {
		return true
	}

	return false
}

// SetDocumentIntegrity gets a reference to the given bool and assigns it to the DocumentIntegrity field.
func (o *SignatureDocument) SetDocumentIntegrity(v bool) {
	o.DocumentIntegrity = &v
}

// GetSignatureValue returns the SignatureValue field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SignatureDocument) GetSignatureValue() string {
	if o == nil || IsNil(o.SignatureValue.Get()) {
		var ret string
		return ret
	}
	return *o.SignatureValue.Get()
}

// GetSignatureValueOk returns a tuple with the SignatureValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SignatureDocument) GetSignatureValueOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SignatureValue.Get(), o.SignatureValue.IsSet()
}

// HasSignatureValue returns a boolean if a field has been set.
func (o *SignatureDocument) HasSignatureValue() bool {
	if o != nil && o.SignatureValue.IsSet() {
		return true
	}

	return false
}

// SetSignatureValue gets a reference to the given NullableString and assigns it to the SignatureValue field.
func (o *SignatureDocument) SetSignatureValue(v string) {
	o.SignatureValue.Set(&v)
}
// SetSignatureValueNil sets the value for SignatureValue to be an explicit nil
func (o *SignatureDocument) SetSignatureValueNil() {
	o.SignatureValue.Set(nil)
}

// UnsetSignatureValue ensures that no value is present for SignatureValue, not even an explicit nil
func (o *SignatureDocument) UnsetSignatureValue() {
	o.SignatureValue.Unset()
}

// GetSignedIn returns the SignedIn field value if set, zero value otherwise.
func (o *SignatureDocument) GetSignedIn() string {
	if o == nil || IsNil(o.SignedIn) {
		var ret string
		return ret
	}
	return *o.SignedIn
}

// GetSignedInOk returns a tuple with the SignedIn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SignatureDocument) GetSignedInOk() (*string, bool) {
	if o == nil || IsNil(o.SignedIn) {
		return nil, false
	}
	return o.SignedIn, true
}

// HasSignedIn returns a boolean if a field has been set.
func (o *SignatureDocument) HasSignedIn() bool {
	if o != nil && !IsNil(o.SignedIn) {
		return true
	}

	return false
}

// SetSignedIn gets a reference to the given string and assigns it to the SignedIn field.
func (o *SignatureDocument) SetSignedIn(v string) {
	o.SignedIn = &v
}

// GetLocation returns the Location field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SignatureDocument) GetLocation() string {
	if o == nil || IsNil(o.Location.Get()) {
		var ret string
		return ret
	}
	return *o.Location.Get()
}

// GetLocationOk returns a tuple with the Location field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SignatureDocument) GetLocationOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Location.Get(), o.Location.IsSet()
}

// HasLocation returns a boolean if a field has been set.
func (o *SignatureDocument) HasLocation() bool {
	if o != nil && o.Location.IsSet() {
		return true
	}

	return false
}

// SetLocation gets a reference to the given NullableString and assigns it to the Location field.
func (o *SignatureDocument) SetLocation(v string) {
	o.Location.Set(&v)
}
// SetLocationNil sets the value for Location to be an explicit nil
func (o *SignatureDocument) SetLocationNil() {
	o.Location.Set(nil)
}

// UnsetLocation ensures that no value is present for Location, not even an explicit nil
func (o *SignatureDocument) UnsetLocation() {
	o.Location.Unset()
}

// GetHashValue returns the HashValue field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SignatureDocument) GetHashValue() string {
	if o == nil || IsNil(o.HashValue.Get()) {
		var ret string
		return ret
	}
	return *o.HashValue.Get()
}

// GetHashValueOk returns a tuple with the HashValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SignatureDocument) GetHashValueOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.HashValue.Get(), o.HashValue.IsSet()
}

// HasHashValue returns a boolean if a field has been set.
func (o *SignatureDocument) HasHashValue() bool {
	if o != nil && o.HashValue.IsSet() {
		return true
	}

	return false
}

// SetHashValue gets a reference to the given NullableString and assigns it to the HashValue field.
func (o *SignatureDocument) SetHashValue(v string) {
	o.HashValue.Set(&v)
}
// SetHashValueNil sets the value for HashValue to be an explicit nil
func (o *SignatureDocument) SetHashValueNil() {
	o.HashValue.Set(nil)
}

// UnsetHashValue ensures that no value is present for HashValue, not even an explicit nil
func (o *SignatureDocument) UnsetHashValue() {
	o.HashValue.Unset()
}

func (o SignatureDocument) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SignatureDocument) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.SignedUsingTsa) {
		toSerialize["signed_using_tsa"] = o.SignedUsingTsa
	}
	if o.Reason.IsSet() {
		toSerialize["reason"] = o.Reason.Get()
	}
	if !IsNil(o.DocumentIntegrity) {
		toSerialize["document_integrity"] = o.DocumentIntegrity
	}
	if o.SignatureValue.IsSet() {
		toSerialize["signature_value"] = o.SignatureValue.Get()
	}
	if !IsNil(o.SignedIn) {
		toSerialize["signed_in"] = o.SignedIn
	}
	if o.Location.IsSet() {
		toSerialize["location"] = o.Location.Get()
	}
	if o.HashValue.IsSet() {
		toSerialize["hash_value"] = o.HashValue.Get()
	}
	return toSerialize, nil
}

type NullableSignatureDocument struct {
	value *SignatureDocument
	isSet bool
}

func (v NullableSignatureDocument) Get() *SignatureDocument {
	return v.value
}

func (v *NullableSignatureDocument) Set(val *SignatureDocument) {
	v.value = val
	v.isSet = true
}

func (v NullableSignatureDocument) IsSet() bool {
	return v.isSet
}

func (v *NullableSignatureDocument) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSignatureDocument(val *SignatureDocument) *NullableSignatureDocument {
	return &NullableSignatureDocument{value: val, isSet: true}
}

func (v NullableSignatureDocument) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSignatureDocument) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


