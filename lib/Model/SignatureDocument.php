<?php
/**
 * SignatureDocument
 *
 * PHP version 5
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * TTE Service
 *
 * This API is used for sending whatsapp via API
 *
 * The version of the OpenAPI document: 1.0.8
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * SignatureDocument Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class SignatureDocument implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'SignatureDocument';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'signed_using_tsa' => 'bool',
        'reason' => 'string',
        'document_integrity' => 'bool',
        'signature_value' => 'string',
        'signed_in' => 'string',
        'location' => 'string',
        'hash_value' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'signed_using_tsa' => null,
        'reason' => null,
        'document_integrity' => null,
        'signature_value' => null,
        'signed_in' => null,
        'location' => null,
        'hash_value' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'signed_using_tsa' => 'signed_using_tsa',
        'reason' => 'reason',
        'document_integrity' => 'document_integrity',
        'signature_value' => 'signature_value',
        'signed_in' => 'signed_in',
        'location' => 'location',
        'hash_value' => 'hash_value'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'signed_using_tsa' => 'setSignedUsingTsa',
        'reason' => 'setReason',
        'document_integrity' => 'setDocumentIntegrity',
        'signature_value' => 'setSignatureValue',
        'signed_in' => 'setSignedIn',
        'location' => 'setLocation',
        'hash_value' => 'setHashValue'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'signed_using_tsa' => 'getSignedUsingTsa',
        'reason' => 'getReason',
        'document_integrity' => 'getDocumentIntegrity',
        'signature_value' => 'getSignatureValue',
        'signed_in' => 'getSignedIn',
        'location' => 'getLocation',
        'hash_value' => 'getHashValue'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['signed_using_tsa'] = isset($data['signed_using_tsa']) ? $data['signed_using_tsa'] : null;
        $this->container['reason'] = isset($data['reason']) ? $data['reason'] : null;
        $this->container['document_integrity'] = isset($data['document_integrity']) ? $data['document_integrity'] : null;
        $this->container['signature_value'] = isset($data['signature_value']) ? $data['signature_value'] : null;
        $this->container['signed_in'] = isset($data['signed_in']) ? $data['signed_in'] : null;
        $this->container['location'] = isset($data['location']) ? $data['location'] : null;
        $this->container['hash_value'] = isset($data['hash_value']) ? $data['hash_value'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets signed_using_tsa
     *
     * @return bool|null
     */
    public function getSignedUsingTsa()
    {
        return $this->container['signed_using_tsa'];
    }

    /**
     * Sets signed_using_tsa
     *
     * @param bool|null $signed_using_tsa signed_using_tsa
     *
     * @return $this
     */
    public function setSignedUsingTsa($signed_using_tsa)
    {
        $this->container['signed_using_tsa'] = $signed_using_tsa;

        return $this;
    }

    /**
     * Gets reason
     *
     * @return string|null
     */
    public function getReason()
    {
        return $this->container['reason'];
    }

    /**
     * Sets reason
     *
     * @param string|null $reason reason
     *
     * @return $this
     */
    public function setReason($reason)
    {
        $this->container['reason'] = $reason;

        return $this;
    }

    /**
     * Gets document_integrity
     *
     * @return bool|null
     */
    public function getDocumentIntegrity()
    {
        return $this->container['document_integrity'];
    }

    /**
     * Sets document_integrity
     *
     * @param bool|null $document_integrity document_integrity
     *
     * @return $this
     */
    public function setDocumentIntegrity($document_integrity)
    {
        $this->container['document_integrity'] = $document_integrity;

        return $this;
    }

    /**
     * Gets signature_value
     *
     * @return string|null
     */
    public function getSignatureValue()
    {
        return $this->container['signature_value'];
    }

    /**
     * Sets signature_value
     *
     * @param string|null $signature_value signature_value
     *
     * @return $this
     */
    public function setSignatureValue($signature_value)
    {
        $this->container['signature_value'] = $signature_value;

        return $this;
    }

    /**
     * Gets signed_in
     *
     * @return string|null
     */
    public function getSignedIn()
    {
        return $this->container['signed_in'];
    }

    /**
     * Sets signed_in
     *
     * @param string|null $signed_in signed_in
     *
     * @return $this
     */
    public function setSignedIn($signed_in)
    {
        $this->container['signed_in'] = $signed_in;

        return $this;
    }

    /**
     * Gets location
     *
     * @return string|null
     */
    public function getLocation()
    {
        return $this->container['location'];
    }

    /**
     * Sets location
     *
     * @param string|null $location location
     *
     * @return $this
     */
    public function setLocation($location)
    {
        $this->container['location'] = $location;

        return $this;
    }

    /**
     * Gets hash_value
     *
     * @return string|null
     */
    public function getHashValue()
    {
        return $this->container['hash_value'];
    }

    /**
     * Sets hash_value
     *
     * @param string|null $hash_value hash_value
     *
     * @return $this
     */
    public function setHashValue($hash_value)
    {
        $this->container['hash_value'] = $hash_value;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


