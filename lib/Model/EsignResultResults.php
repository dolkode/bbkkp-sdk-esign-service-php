<?php
/**
 * EsignResultResults
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  BBSPJIKKP\Sdk\Esign
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * TTE Service
 *
 * This API is used for sending whatsapp via API
 *
 * The version of the OpenAPI document: 1.0.8
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.8.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace BBSPJIKKP\Sdk\Esign\Model;

use \ArrayAccess;
use \BBSPJIKKP\Sdk\Esign\ObjectSerializer;

/**
 * EsignResultResults Class Doc Comment
 *
 * @category Class
 * @package  BBSPJIKKP\Sdk\Esign
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class EsignResultResults implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'EsignResult_results';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'layanan' => 'string',
        'ref_code' => 'string',
        'ref_metadata' => 'string',
        'file_name' => 'string',
        'file_link' => 'string',
        'date_signed' => 'string',
        'esign_details' => '\BBSPJIKKP\Sdk\Esign\Model\EsignDetails'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'layanan' => null,
        'ref_code' => null,
        'ref_metadata' => null,
        'file_name' => null,
        'file_link' => null,
        'date_signed' => null,
        'esign_details' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'layanan' => false,
        'ref_code' => false,
        'ref_metadata' => false,
        'file_name' => false,
        'file_link' => false,
        'date_signed' => false,
        'esign_details' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'layanan' => 'layanan',
        'ref_code' => 'ref_code',
        'ref_metadata' => 'ref_metadata',
        'file_name' => 'file_name',
        'file_link' => 'file_link',
        'date_signed' => 'date_signed',
        'esign_details' => 'esign_details'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'layanan' => 'setLayanan',
        'ref_code' => 'setRefCode',
        'ref_metadata' => 'setRefMetadata',
        'file_name' => 'setFileName',
        'file_link' => 'setFileLink',
        'date_signed' => 'setDateSigned',
        'esign_details' => 'setEsignDetails'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'layanan' => 'getLayanan',
        'ref_code' => 'getRefCode',
        'ref_metadata' => 'getRefMetadata',
        'file_name' => 'getFileName',
        'file_link' => 'getFileLink',
        'date_signed' => 'getDateSigned',
        'esign_details' => 'getEsignDetails'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('layanan', $data ?? [], null);
        $this->setIfExists('ref_code', $data ?? [], null);
        $this->setIfExists('ref_metadata', $data ?? [], null);
        $this->setIfExists('file_name', $data ?? [], null);
        $this->setIfExists('file_link', $data ?? [], null);
        $this->setIfExists('date_signed', $data ?? [], null);
        $this->setIfExists('esign_details', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets layanan
     *
     * @return string|null
     */
    public function getLayanan()
    {
        return $this->container['layanan'];
    }

    /**
     * Sets layanan
     *
     * @param string|null $layanan layanan
     *
     * @return self
     */
    public function setLayanan($layanan)
    {
        if (is_null($layanan)) {
            throw new \InvalidArgumentException('non-nullable layanan cannot be null');
        }
        $this->container['layanan'] = $layanan;

        return $this;
    }

    /**
     * Gets ref_code
     *
     * @return string|null
     */
    public function getRefCode()
    {
        return $this->container['ref_code'];
    }

    /**
     * Sets ref_code
     *
     * @param string|null $ref_code ref_code
     *
     * @return self
     */
    public function setRefCode($ref_code)
    {
        if (is_null($ref_code)) {
            throw new \InvalidArgumentException('non-nullable ref_code cannot be null');
        }
        $this->container['ref_code'] = $ref_code;

        return $this;
    }

    /**
     * Gets ref_metadata
     *
     * @return string|null
     */
    public function getRefMetadata()
    {
        return $this->container['ref_metadata'];
    }

    /**
     * Sets ref_metadata
     *
     * @param string|null $ref_metadata ref_metadata
     *
     * @return self
     */
    public function setRefMetadata($ref_metadata)
    {
        if (is_null($ref_metadata)) {
            throw new \InvalidArgumentException('non-nullable ref_metadata cannot be null');
        }
        $this->container['ref_metadata'] = $ref_metadata;

        return $this;
    }

    /**
     * Gets file_name
     *
     * @return string|null
     */
    public function getFileName()
    {
        return $this->container['file_name'];
    }

    /**
     * Sets file_name
     *
     * @param string|null $file_name file_name
     *
     * @return self
     */
    public function setFileName($file_name)
    {
        if (is_null($file_name)) {
            throw new \InvalidArgumentException('non-nullable file_name cannot be null');
        }
        $this->container['file_name'] = $file_name;

        return $this;
    }

    /**
     * Gets file_link
     *
     * @return string|null
     */
    public function getFileLink()
    {
        return $this->container['file_link'];
    }

    /**
     * Sets file_link
     *
     * @param string|null $file_link file_link
     *
     * @return self
     */
    public function setFileLink($file_link)
    {
        if (is_null($file_link)) {
            throw new \InvalidArgumentException('non-nullable file_link cannot be null');
        }
        $this->container['file_link'] = $file_link;

        return $this;
    }

    /**
     * Gets date_signed
     *
     * @return string|null
     */
    public function getDateSigned()
    {
        return $this->container['date_signed'];
    }

    /**
     * Sets date_signed
     *
     * @param string|null $date_signed date_signed
     *
     * @return self
     */
    public function setDateSigned($date_signed)
    {
        if (is_null($date_signed)) {
            throw new \InvalidArgumentException('non-nullable date_signed cannot be null');
        }
        $this->container['date_signed'] = $date_signed;

        return $this;
    }

    /**
     * Gets esign_details
     *
     * @return \BBSPJIKKP\Sdk\Esign\Model\EsignDetails|null
     */
    public function getEsignDetails()
    {
        return $this->container['esign_details'];
    }

    /**
     * Sets esign_details
     *
     * @param \BBSPJIKKP\Sdk\Esign\Model\EsignDetails|null $esign_details esign_details
     *
     * @return self
     */
    public function setEsignDetails($esign_details)
    {
        if (is_null($esign_details)) {
            throw new \InvalidArgumentException('non-nullable esign_details cannot be null');
        }
        $this->container['esign_details'] = $esign_details;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


