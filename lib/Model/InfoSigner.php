<?php
/**
 * InfoSigner
 *
 * PHP version 5
 *
 * @category Class
 * @package  BBSPJIKKP\Sdk\Esign
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * TTE Service
 *
 * This API is used for sending whatsapp via API
 *
 * The version of the OpenAPI document: 1.0.8
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace BBSPJIKKP\Sdk\Esign\Model;

use \ArrayAccess;
use \BBSPJIKKP\Sdk\Esign\ObjectSerializer;

/**
 * InfoSigner Class Doc Comment
 *
 * @category Class
 * @package  BBSPJIKKP\Sdk\Esign
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class InfoSigner implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'InfoSigner';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'issuer_dn' => 'string',
        'signer_name' => 'string',
        'signer_cert_validity' => 'string',
        'signer_dn' => 'string',
        'cert_user_certified' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'issuer_dn' => null,
        'signer_name' => null,
        'signer_cert_validity' => null,
        'signer_dn' => null,
        'cert_user_certified' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'issuer_dn' => 'issuer_dn',
        'signer_name' => 'signer_name',
        'signer_cert_validity' => 'signer_cert_validity',
        'signer_dn' => 'signer_dn',
        'cert_user_certified' => 'cert_user_certified'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'issuer_dn' => 'setIssuerDn',
        'signer_name' => 'setSignerName',
        'signer_cert_validity' => 'setSignerCertValidity',
        'signer_dn' => 'setSignerDn',
        'cert_user_certified' => 'setCertUserCertified'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'issuer_dn' => 'getIssuerDn',
        'signer_name' => 'getSignerName',
        'signer_cert_validity' => 'getSignerCertValidity',
        'signer_dn' => 'getSignerDn',
        'cert_user_certified' => 'getCertUserCertified'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['issuer_dn'] = isset($data['issuer_dn']) ? $data['issuer_dn'] : null;
        $this->container['signer_name'] = isset($data['signer_name']) ? $data['signer_name'] : null;
        $this->container['signer_cert_validity'] = isset($data['signer_cert_validity']) ? $data['signer_cert_validity'] : null;
        $this->container['signer_dn'] = isset($data['signer_dn']) ? $data['signer_dn'] : null;
        $this->container['cert_user_certified'] = isset($data['cert_user_certified']) ? $data['cert_user_certified'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets issuer_dn
     *
     * @return string|null
     */
    public function getIssuerDn()
    {
        return $this->container['issuer_dn'];
    }

    /**
     * Sets issuer_dn
     *
     * @param string|null $issuer_dn issuer_dn
     *
     * @return $this
     */
    public function setIssuerDn($issuer_dn)
    {
        $this->container['issuer_dn'] = $issuer_dn;

        return $this;
    }

    /**
     * Gets signer_name
     *
     * @return string|null
     */
    public function getSignerName()
    {
        return $this->container['signer_name'];
    }

    /**
     * Sets signer_name
     *
     * @param string|null $signer_name signer_name
     *
     * @return $this
     */
    public function setSignerName($signer_name)
    {
        $this->container['signer_name'] = $signer_name;

        return $this;
    }

    /**
     * Gets signer_cert_validity
     *
     * @return string|null
     */
    public function getSignerCertValidity()
    {
        return $this->container['signer_cert_validity'];
    }

    /**
     * Sets signer_cert_validity
     *
     * @param string|null $signer_cert_validity signer_cert_validity
     *
     * @return $this
     */
    public function setSignerCertValidity($signer_cert_validity)
    {
        $this->container['signer_cert_validity'] = $signer_cert_validity;

        return $this;
    }

    /**
     * Gets signer_dn
     *
     * @return string|null
     */
    public function getSignerDn()
    {
        return $this->container['signer_dn'];
    }

    /**
     * Sets signer_dn
     *
     * @param string|null $signer_dn signer_dn
     *
     * @return $this
     */
    public function setSignerDn($signer_dn)
    {
        $this->container['signer_dn'] = $signer_dn;

        return $this;
    }

    /**
     * Gets cert_user_certified
     *
     * @return bool|null
     */
    public function getCertUserCertified()
    {
        return $this->container['cert_user_certified'];
    }

    /**
     * Sets cert_user_certified
     *
     * @param bool|null $cert_user_certified cert_user_certified
     *
     * @return $this
     */
    public function setCertUserCertified($cert_user_certified)
    {
        $this->container['cert_user_certified'] = $cert_user_certified;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


