<?php
/**
 * EsignDetails
 *
 * PHP version 5
 *
 * @category Class
 * @package  BBSPJIKKP\Sdk\Esign
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * TTE Service
 *
 * This API is used for sending whatsapp via API
 *
 * The version of the OpenAPI document: 1.0.8
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace BBSPJIKKP\Sdk\Esign\Model;

use \ArrayAccess;
use \BBSPJIKKP\Sdk\Esign\ObjectSerializer;

/**
 * EsignDetails Class Doc Comment
 *
 * @category Class
 * @package  BBSPJIKKP\Sdk\Esign
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class EsignDetails implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'EsignDetails';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'nama_dokumen' => 'string',
        'jumlah_signature' => 'int',
        'notes' => 'string',
        'details' => '\BBSPJIKKP\Sdk\Esign\Model\SignatureDetail[]',
        'summary' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'nama_dokumen' => null,
        'jumlah_signature' => null,
        'notes' => null,
        'details' => null,
        'summary' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'nama_dokumen' => 'nama_dokumen',
        'jumlah_signature' => 'jumlah_signature',
        'notes' => 'notes',
        'details' => 'details',
        'summary' => 'summary'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'nama_dokumen' => 'setNamaDokumen',
        'jumlah_signature' => 'setJumlahSignature',
        'notes' => 'setNotes',
        'details' => 'setDetails',
        'summary' => 'setSummary'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'nama_dokumen' => 'getNamaDokumen',
        'jumlah_signature' => 'getJumlahSignature',
        'notes' => 'getNotes',
        'details' => 'getDetails',
        'summary' => 'getSummary'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['nama_dokumen'] = isset($data['nama_dokumen']) ? $data['nama_dokumen'] : null;
        $this->container['jumlah_signature'] = isset($data['jumlah_signature']) ? $data['jumlah_signature'] : null;
        $this->container['notes'] = isset($data['notes']) ? $data['notes'] : null;
        $this->container['details'] = isset($data['details']) ? $data['details'] : null;
        $this->container['summary'] = isset($data['summary']) ? $data['summary'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets nama_dokumen
     *
     * @return string|null
     */
    public function getNamaDokumen()
    {
        return $this->container['nama_dokumen'];
    }

    /**
     * Sets nama_dokumen
     *
     * @param string|null $nama_dokumen nama_dokumen
     *
     * @return $this
     */
    public function setNamaDokumen($nama_dokumen)
    {
        $this->container['nama_dokumen'] = $nama_dokumen;

        return $this;
    }

    /**
     * Gets jumlah_signature
     *
     * @return int|null
     */
    public function getJumlahSignature()
    {
        return $this->container['jumlah_signature'];
    }

    /**
     * Sets jumlah_signature
     *
     * @param int|null $jumlah_signature jumlah_signature
     *
     * @return $this
     */
    public function setJumlahSignature($jumlah_signature)
    {
        $this->container['jumlah_signature'] = $jumlah_signature;

        return $this;
    }

    /**
     * Gets notes
     *
     * @return string|null
     */
    public function getNotes()
    {
        return $this->container['notes'];
    }

    /**
     * Sets notes
     *
     * @param string|null $notes notes
     *
     * @return $this
     */
    public function setNotes($notes)
    {
        $this->container['notes'] = $notes;

        return $this;
    }

    /**
     * Gets details
     *
     * @return \BBSPJIKKP\Sdk\Esign\Model\SignatureDetail[]|null
     */
    public function getDetails()
    {
        return $this->container['details'];
    }

    /**
     * Sets details
     *
     * @param \BBSPJIKKP\Sdk\Esign\Model\SignatureDetail[]|null $details details
     *
     * @return $this
     */
    public function setDetails($details)
    {
        $this->container['details'] = $details;

        return $this;
    }

    /**
     * Gets summary
     *
     * @return string|null
     */
    public function getSummary()
    {
        return $this->container['summary'];
    }

    /**
     * Sets summary
     *
     * @param string|null $summary summary
     *
     * @return $this
     */
    public function setSummary($summary)
    {
        $this->container['summary'] = $summary;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


