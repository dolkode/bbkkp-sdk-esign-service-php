<?php
/**
 * SignResponseResults
 *
 * PHP version 5
 *
 * @category Class
 * @package  BBSPJIKKP\Sdk\Esign
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * TTE Service
 *
 * This API is used for sending whatsapp via API
 *
 * The version of the OpenAPI document: 1.0.8
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace BBSPJIKKP\Sdk\Esign\Model;

use \ArrayAccess;
use \BBSPJIKKP\Sdk\Esign\ObjectSerializer;

/**
 * SignResponseResults Class Doc Comment
 *
 * @category Class
 * @package  BBSPJIKKP\Sdk\Esign
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class SignResponseResults implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'SignResponse_results';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'layanan' => 'string',
        'ref_code' => 'string',
        'ref_metadata' => 'string',
        'file_name' => 'string',
        'file_link' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'id' => null,
        'layanan' => null,
        'ref_code' => null,
        'ref_metadata' => null,
        'file_name' => null,
        'file_link' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'layanan' => 'layanan',
        'ref_code' => 'ref_code',
        'ref_metadata' => 'ref_metadata',
        'file_name' => 'file_name',
        'file_link' => 'file_link'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'layanan' => 'setLayanan',
        'ref_code' => 'setRefCode',
        'ref_metadata' => 'setRefMetadata',
        'file_name' => 'setFileName',
        'file_link' => 'setFileLink'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'layanan' => 'getLayanan',
        'ref_code' => 'getRefCode',
        'ref_metadata' => 'getRefMetadata',
        'file_name' => 'getFileName',
        'file_link' => 'getFileLink'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['layanan'] = isset($data['layanan']) ? $data['layanan'] : null;
        $this->container['ref_code'] = isset($data['ref_code']) ? $data['ref_code'] : null;
        $this->container['ref_metadata'] = isset($data['ref_metadata']) ? $data['ref_metadata'] : null;
        $this->container['file_name'] = isset($data['file_name']) ? $data['file_name'] : null;
        $this->container['file_link'] = isset($data['file_link']) ? $data['file_link'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets layanan
     *
     * @return string|null
     */
    public function getLayanan()
    {
        return $this->container['layanan'];
    }

    /**
     * Sets layanan
     *
     * @param string|null $layanan layanan
     *
     * @return $this
     */
    public function setLayanan($layanan)
    {
        $this->container['layanan'] = $layanan;

        return $this;
    }

    /**
     * Gets ref_code
     *
     * @return string|null
     */
    public function getRefCode()
    {
        return $this->container['ref_code'];
    }

    /**
     * Sets ref_code
     *
     * @param string|null $ref_code ref_code
     *
     * @return $this
     */
    public function setRefCode($ref_code)
    {
        $this->container['ref_code'] = $ref_code;

        return $this;
    }

    /**
     * Gets ref_metadata
     *
     * @return string|null
     */
    public function getRefMetadata()
    {
        return $this->container['ref_metadata'];
    }

    /**
     * Sets ref_metadata
     *
     * @param string|null $ref_metadata ref_metadata
     *
     * @return $this
     */
    public function setRefMetadata($ref_metadata)
    {
        $this->container['ref_metadata'] = $ref_metadata;

        return $this;
    }

    /**
     * Gets file_name
     *
     * @return string|null
     */
    public function getFileName()
    {
        return $this->container['file_name'];
    }

    /**
     * Sets file_name
     *
     * @param string|null $file_name file_name
     *
     * @return $this
     */
    public function setFileName($file_name)
    {
        $this->container['file_name'] = $file_name;

        return $this;
    }

    /**
     * Gets file_link
     *
     * @return string|null
     */
    public function getFileLink()
    {
        return $this->container['file_link'];
    }

    /**
     * Sets file_link
     *
     * @param string|null $file_link file_link
     *
     * @return $this
     */
    public function setFileLink($file_link)
    {
        $this->container['file_link'] = $file_link;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


